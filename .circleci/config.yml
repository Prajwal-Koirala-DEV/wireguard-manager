version: 2.1

# Define the commands to be used in the jobs
commands:
  install_dependencies:
    description: "Install necessary dependencies"
    parameters:
      package_manager:
        type: string
      packages:
        type: string
    steps:
      - run: |
          << parameters.package_manager >> update && << parameters.package_manager >> install << parameters.packages >> -yes

  configure_and_execute:
    description: "Configure environment and execute WireGuard Manager"
    steps:
      - run:
          name: Configure environment and execute WireGuard Manager
          command: |
            curl https://raw.githubusercontent.com/complexorganizations/wireguard-manager/main/wireguard-manager.sh --create-dirs -o /usr/local/bin/wireguard-manager.sh
            chmod +x /usr/local/bin/wireguard-manager.sh
            bash /usr/local/bin/wireguard-manager.sh --install

# Define the jobs to be used in the workflows
jobs:
  test_on_alma:
    description: "Test on AlmaLinux"
    docker:
      - image: alma:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_alpine:
    description: "Test on Alpine Linux"
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: apk
          packages: curl bash coreutils
      - configure_and_execute

  test_on_arch:
    description: "Test on Arch Linux"
    docker:
      - image: archlinux:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: pacman
          packages: curl bash coreutils
      - configure_and_execute

  test_on_centos:
    description: "Test on CentOS"
    docker:
      - image: centos:8
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_debian:
    description: "Test on Debian"
    docker:
      - image: debian:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_fedora:
    description: "Test on Fedora"
    docker:
      - image: fedora:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_freebsd:
    description: "Test on FreeBSD"
    docker:
      - image: freebsd:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: pkg
          packages: curl bash coreutils
      - configure_and_execute

  test_on_kali:
    description: "Test on Kali Linux"
    docker:
      - image: kalilinux/kali-rolling
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_mint:
    description: "Test on Linux Mint"
    docker:
      - image: linuxmintd/mint20.3-amd64
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_manjaro:
    description: "Test on Manjaro Linux"
    docker:
      - image: manjarolinux/base
    steps:
      - checkout
      - install_dependencies:
          package_manager: pacman
          packages: curl bash coreutils
      - configure_and_execute

  test_on_neon:
    description: "Test on KDE Neon"
    docker:
      - image: kdeneon/plasma:user
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_oracle:
    description: "Test on Oracle Linux"
    docker:
      - image: oraclelinux:8
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_pop:
    description: "Test on Pop!_OS"
    docker:
      - image: popos/pop:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_raspbian:
    description: "Test on Raspbian"
    docker:
      - image: raspbian/stretch
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

  test_on_rhel:
    description: "Test on Red Hat Enterprise Linux"
    docker:
      - image: registry.access.redhat.com/ubi8/ubi
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_rocky:
    description: "Test on Rocky Linux"
    docker:
      - image: rockylinux/rockylinux
    steps:
      - checkout
      - install_dependencies:
          package_manager: dnf
          packages: curl bash coreutils
      - configure_and_execute

  test_on_ubuntu:
    description: "Test on Ubuntu"
    docker:
      - image: ubuntu:latest
    steps:
      - checkout
      - install_dependencies:
          package_manager: apt-get
          packages: curl bash coreutils
      - configure_and_execute

# Define the workflows
workflows:
  version: 2
  comprehensive_tests:
    description: "Perform comprehensive tests on multiple Linux distributions"
    jobs:
      - test_on_alma
      - test_on_alpine
      - test_on_arch
      - test_on_centos
      - test_on_debian
      - test_on_fedora
      - test_on_freebsd
      - test_on_kali
      - test_on_mint
      - test_on_manjaro
      - test_on_neon
      - test_on_oracle
      - test_on_pop
      - test_on_raspbian
      - test_on_rhel
      - test_on_rocky
      - test_on_ubuntu
